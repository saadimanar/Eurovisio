//state.c
#include "state.h"
#include "map.h"
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include <string.h>

typedef struct state_t {
    int id;
    char *stateName;
    char *songName;
    Map votes;
} *State;

MapKeyElement copyInt(MapKeyElement number) {
    if (!number) {
        return NULL;
    }
    int *copy = malloc(sizeof(*copy));
    if (!copy) {
        return NULL;
    }
    *copy = *(int*)number;
    return copy;
}
void freeInt(MapKeyElement number){
    free(number);
}
int compareInts(MapKeyElement number1, MapKeyElement number2){
    return (*(int*)number1 - *(int*)number2);
}

State stateCreate(const char* stateName, const char* songName){
    State state = malloc(sizeof(*state));
    if(state == NULL){
        return NULL;
    }
    state->stateName = malloc((sizeof(char))*(strlen(stateName)+1));
    if(state->stateName == NULL){
        stateDestroy(state);
        return NULL;
    }
    strcpy_s((state->stateName), (strlen(stateName)+1), stateName);
    state->songName = malloc((sizeof(char))*(strlen(songName)+1));
    if(state->songName == NULL){
        stateDestroy(state);
        return NULL;
    }
    strcpy_s((state->songName), (strlen(songName)+1), songName);

    state->votes = mapCreate(copyInt, copyInt, freeInt, freeInt, compareInts);
    return state;
}

void stateDestroy(State state){
    if(state == NULL){
        return;
    }
    free(state->stateName);
    free(state->songName);
    mapDestroy(state->votes);
    free(state);
}

State stateCopy(State state){
    if(state == NULL){
        return NULL;
    }
    State newState = malloc(sizeof(*newState));
    if(newState == NULL){
        return NULL;
    }
    newState->stateName = malloc((sizeof(char))*(strlen(((State)state)->stateName)+1));
    if(newState->stateName == NULL){
        stateDestroy(newState);
        return NULL;
    }
    strcpy_s((newState->stateName), (strlen(((State)state)->stateName)+1), (((State)state)->stateName));
    newState->songName = malloc((sizeof(char))*(strlen(((State)state)->songName)+1));
    if(newState->songName == NULL){
        stateDestroy(newState);
        return NULL;
    }
    strcpy_s((newState->songName), (strlen(((State)state)->songName)+1), (((State)state)->songName));
    newState->votes = mapCopy(((State)state)->votes);
    if(newState->votes == NULL){
        stateDestroy(newState);
        return NULL;
    }
    return newState;
}

bool addOneVote(State state, int stateTaker){
    int* stateVotes = mapGet(state->votes, &stateTaker);
    if(stateVotes != NULL) {
        *stateVotes = (*stateVotes) + 1;
        return true;
    }
    int firstVote = FIRST_VOTE;
    if(mapPut(state->votes, &stateTaker, &firstVote) != MAP_SUCCESS) {
        return false;
    }
    return true;
}

int getStateWithHighestVotes(Map map){
    int max = INITIAL_VALUE;
    int id = INITIAL_VALUE;
    int i = 1;
    MAP_FOREACH(int*, iterator, map) {
        int *votes = mapGet(map, iterator);
        if (votes != NULL) {
            if (i == 1) {
                id = *iterator;
                i++;
            }
            if (*votes == max) {
                if (id > *iterator) {
                    id = *iterator;
                }
            }
            if (*votes > max) {
                max = *votes;
                id = *iterator;
            }
        }
    }
    return id;
}

void removeOneVote(State state, int stateTaker){
    int* stateVotes = mapGet(state->votes, &stateTaker);
    if(stateVotes != NULL) {
        *stateVotes = (*stateVotes) - 1;
    }
}

int* topVotingStates(State state){
    if((state->votes) == NULL){
        return NULL;
    }
    int* audienceVotes = malloc(sizeof(audienceVotes) * DIFFERENT_VALID_SCORE);
    Map mapCopied = mapCopy(state->votes);
    int i = 0;
    int* iterator = mapGetFirst(mapCopied);
    while((i < DIFFERENT_VALID_SCORE) && (iterator != NULL)){
        int id = getStateWithHighestVotes(mapCopied);
        if(id == -1){
            while (i < DIFFERENT_VALID_SCORE){
                audienceVotes[i] = 0;
                i++;
            }
            mapDestroy(mapCopied);
            return audienceVotes;
        }
        mapRemove(mapCopied, &id);
        audienceVotes[i] = id;
        i++;
        iterator = mapGetFirst(mapCopied);
    }
    if(iterator == NULL){
        while (i < DIFFERENT_VALID_SCORE){
            audienceVotes[i] = 0;
            i++;
        }
    }
    mapDestroy(mapCopied);
    return audienceVotes;
}

//judge.c
#include "judge.h"
#include "map.h"
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include <string.h>

typedef struct judge_t {
    char *judgeName;
    int scores[JUDGE_SCORE];
} *Judge;

Judge judgeCreate(const char* judgeName, const int* scores){
    Judge judge = malloc(sizeof(*judge));
    if(judge == NULL){
        return NULL;
    }
    judge->judgeName = malloc((sizeof(char))*(strlen(judgeName)+1));
    if(judge->judgeName == NULL){
        judgeDestroy(judge);
        return NULL;
    }
    strcpy_s((judge->judgeName), (strlen(judgeName)+1), judgeName);

    for (int i = 0; i < JUDGE_SCORE; ++i) {
        (judge->scores)[i] = scores[i];
    }
    return judge;
}

void judgeDestroy(Judge judge){
    if(judge == NULL){
        return;
    }
    free(judge->judgeName);
    free(judge);
}

Judge judgeCopy(Judge judge){
    if(judge == NULL){
        return NULL;
    }
    Judge newJudge = malloc(sizeof(*newJudge));
    if(newJudge == NULL){
        return NULL;
    }
    newJudge->judgeName = malloc((sizeof(char))*(strlen(judge->judgeName)+1));
    if(newJudge->judgeName == NULL){
        judgeDestroy(newJudge);
        return NULL;
    }
    strcpy_s((newJudge->judgeName), (strlen(judge->judgeName)+1), judge->judgeName);

    for(int i=0; i < JUDGE_SCORE; i++){
        (newJudge->scores)[i] = (judge->scores)[i];
    }
    return newJudge;
}

bool judgeContainState(Judge judge, int stateId){
    if(judge == NULL){
        return false;
    }
    for (int i = 0; i < JUDGE_SCORE; ++i) {
        if((judge->scores)[i] == stateId){
            return true;
        }
    }
    return false;
}

//eurovision.c

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <stdbool.h>
#include <string.h>
#include "map.h"
#include "list.h"
#include "eurovision.h"
#include "state.h"
#include "judge.h"

typedef struct eurovision_t {
    Map states;
    Map judges;
} *Eurovision;

typedef struct state_t {
    int id;
    char *stateName;
    char *songName;
    Map votes;
} *State;

typedef struct judge_t {
    int id;
    char *judgeName;
    int scores[JUDGE_SCORE];
} *Judge;

int* copyId(const int* id) {
    if (!id) {
        return NULL;
    }
    int *copy = malloc(sizeof(*copy));
    if (!copy) {
        return NULL;
    }
    *copy = *id;
    return copy;
}
void freeId(int* id) {
    free(id);
}
int compareIds(const int* id1, const int* id2) {
    return (*id1 - *id2);
}

int compareChars(char* listElement1, char* listElement2){
    int i = 0;
    while((i < (int)(strlen(listElement1) - 1)) && (i < (int)(strlen(listElement2) - 1)) &&
          (listElement1)[i] == (listElement2)[i]){

        i++;
    }
    return ((listElement1)[i] - (listElement2)[i]);
}
void freeChars(char* name) {
    free(name);
}
char* copyChars(char* name) {
    if (!name) {
        return NULL;
    }
    char *copy = malloc(sizeof(*copy)*(strlen(name)+1));
    if (!copy) {
        return NULL;
    }
    strcpy_s(copy, strlen(name)+1, name);
    return copy;
}

bool isValidJudgeName(const char* judgeName){
    int i = 0;
    while(judgeName[i]){
        if (judgeName[i] == ' '){
            continue;
        }
        if ((judgeName[i] < 'a') || (judgeName[i] > 'z')){
            return false;
        }
        i++;
    }
    return true;
}
char* writeStateByOrder(char* stateName1, char* stateName2){
    char* result = malloc(sizeof(char)*((strlen(stateName1))+ strlen(stateName2) + 4));
    if(compareChars(stateName1, stateName2) < 0){
        strcpy_s(result, (strlen(stateName1)+1), (stateName1));
        strcat_s(result, (strlen(stateName1)+4), " - ");
        strcat_s(result, (strlen(stateName1))+ strlen(stateName2) + 4, stateName2);
    } else{
        strcpy_s(result, (strlen(stateName2)+1), (stateName2));
        strcat_s(result, (strlen(stateName2)+4), " - ");
        strcat_s(result, (strlen(stateName1))+ strlen(stateName2) + 4, stateName1);
    }
    return result;
}
double* copyDouble(const double* number) {
    if (!number) {
        return NULL;
    }
    double *copy = malloc(sizeof(*copy));
    if (!copy) {
        return NULL;
    }
    *copy = *number;
    return copy;
}
void freeDouble(double* number) {
    free(number);
}

Map createMapAndPutStart(Eurovision eurovision, copyMapDataElements copyMapDataElements, freeMapDataElements freeMapDataElement, int start){
    Map map = mapCreate(copyMapDataElements, (copyMapKeyElements)copyId, freeMapDataElement,
            (freeMapKeyElements)freeId, (compareMapKeyElements)compareIds);
    if(map == NULL){
        return NULL;
    }
    MAP_FOREACH(int*, iterator, eurovision->states) {
        if (mapPut(map, iterator, &start) != MAP_SUCCESS) {
            mapDestroy(map);
            return NULL;
        }
    }
    return map;
}
int votesToScores(int votes){
    switch (votes){
        case 0:
            return 12;
        case 1:
            return  10;
        case 2:
            return  8;
        default:
            return (JUDGE_SCORE - votes);
    }
}
void fillMapScore(Map map, const int* topVotes){
    for (int i = 0; i < DIFFERENT_VALID_SCORE; ++i){
        int id = topVotes[i];
        if(id != INITIAL_VALUE) {
            int *score = mapGet(map, &id);
            *score = *score + votesToScores(i);
        }
    }
}
int maxScoreDouble(Map map){
    double max = INITIAL_VALUE;
    int id = INITIAL_VALUE;
    int i = 1;
    MAP_FOREACH(int*, iterator, map) {
        double* votes = mapGet(map, iterator);
        if (votes != NULL) {
            if (i == 1) {
                id = *iterator;
                i++;
            }
            if (*votes == max) {
                if (id > *iterator) {
                    id = *iterator;
                }
            }
            if (*votes > max) {
                max = *votes;
                id = *iterator;
            }
        }
    }
    return id;
}

Eurovision eurovisionCreate(){
    Eurovision eurovision = malloc(sizeof(*eurovision));
    if(eurovision == NULL){
        return NULL;
    }
    eurovision->states = mapCreate((copyMapDataElements)stateCopy, (copyMapKeyElements)copyId,
            (freeMapDataElements)stateDestroy, (freeMapKeyElements)freeId, (compareMapKeyElements)compareIds);
    if(eurovision->states == NULL){
        eurovisionDestroy(eurovision);
        return NULL;
    }
    eurovision->judges = mapCreate((copyMapDataElements)judgeCopy, (copyMapKeyElements)copyId,
            (freeMapDataElements)judgeDestroy, (freeMapKeyElements)freeId, (compareMapKeyElements)compareIds);
    if(eurovision->judges == NULL){
        eurovisionDestroy(eurovision);
        return NULL;
    }
    return eurovision;
}

void eurovisionDestroy(Eurovision eurovision){
    mapDestroy(eurovision->states);
    mapDestroy(eurovision->judges);
    free(eurovision);
}

EurovisionResult eurovisionAddState(Eurovision eurovision, int stateId,
                                    const char *stateName,
                                    const char *songName){
    if((eurovision == NULL) || (stateName == NULL) || (songName == NULL)){
        return EUROVISION_NULL_ARGUMENT;
    }
    if(stateId < 0){
        return EUROVISION_INVALID_ID;
    }
    if(mapContains(eurovision->states, &stateId)){
        return EUROVISION_STATE_ALREADY_EXIST;
    }

    State state = stateCreate(stateId, stateName, songName);
    if(state == NULL){
        return EUROVISION_OUT_OF_MEMORY;
    }
    if(mapPut(eurovision->states, &stateId, state) == MAP_SUCCESS){
        return EUROVISION_SUCCESS;
    }
    return EUROVISION_OUT_OF_MEMORY;
}

EurovisionResult eurovisionRemoveState(Eurovision eurovision, int stateId){
    if(eurovision == NULL){
        return EUROVISION_NULL_ARGUMENT;
    }
    if(stateId < 0){
        return EUROVISION_INVALID_ID;
    }
    if(mapRemove(eurovision->states, &stateId) != MAP_SUCCESS){
        return EUROVISION_STATE_NOT_EXIST;
    }
    int* ptrJudge = mapGetFirst(eurovision->judges);
    while(ptrJudge != NULL){
        Judge judge = mapGet(eurovision->judges, ptrJudge);
        int* ptr = ptrJudge;
        ptrJudge = mapGetNext(eurovision->judges);
        if(judgeContainState(judge, stateId)){
            mapRemove(eurovision->judges, ptr);
        }
    }
    MAP_FOREACH(int*, iterator, eurovision->states){
        State state = mapGet(eurovision->states, iterator);
        mapRemove(state->votes, &stateId);
    }
    return EUROVISION_SUCCESS;
}

EurovisionResult eurovisionAddJudge(Eurovision eurovision, int judgeId,
                                    const char *judgeName,
                                    int *judgeResults){
    if((eurovision == NULL) || (judgeName == NULL) || (judgeResults == NULL)){
        return EUROVISION_NULL_ARGUMENT;
    }
    if(judgeId < 0){
        return EUROVISION_INVALID_ID;
    }
    for (int i = 0; i < JUDGE_SCORE; i++) {
        if (judgeResults[i] < 0) {
            return EUROVISION_INVALID_ID;
        }
    }
    for (int i = 0; i < JUDGE_SCORE; i++){
        if (!mapContains(eurovision->states, &judgeResults[i])) {
            return EUROVISION_STATE_NOT_EXIST;
        }
    }
    if(!isValidJudgeName(judgeName)){
        return EUROVISION_INVALID_NAME;
    }
    if(mapContains(eurovision->judges, &judgeId)){
        return EUROVISION_JUDGE_ALREADY_EXIST;
    }

    Judge judge = judgeCreate(judgeId, judgeName, judgeResults);

    if(mapPut(eurovision->judges, &judgeId, judge) != MAP_SUCCESS){
        return EUROVISION_OUT_OF_MEMORY;
    }
    return EUROVISION_SUCCESS;
}

EurovisionResult eurovisionRemoveJudge(Eurovision eurovision, int judgeId){
    if(eurovision == NULL){
        return EUROVISION_NULL_ARGUMENT;
    }
    if(judgeId < 0){
        return EUROVISION_INVALID_ID;
    }
    if(mapRemove(eurovision->judges, &judgeId) != MAP_SUCCESS) {
        return EUROVISION_JUDGE_NOT_EXIST;
    }
    return EUROVISION_SUCCESS;
}

EurovisionResult eurovisionAddVote(Eurovision eurovision, int stateGiver, int stateTaker){
    if(eurovision == NULL){
        return EUROVISION_NULL_ARGUMENT;
    }
    if((stateGiver < 0) || (stateTaker < 0)){
        return EUROVISION_INVALID_ID;
    }
    if((!mapContains(eurovision->states, &stateGiver)) || (!mapContains(eurovision->states, &stateTaker))){
        return EUROVISION_STATE_NOT_EXIST;
    }
    if (stateGiver == stateTaker){
        return EUROVISION_SAME_STATE;
    }
    State state = mapGet(eurovision->states, &stateGiver);
    if(addOneVote(state, stateTaker)){
        return EUROVISION_SUCCESS;
    }
    return EUROVISION_OUT_OF_MEMORY;
}

EurovisionResult eurovisionRemoveVote(Eurovision eurovision, int stateGiver, int stateTaker){
    if(eurovision == NULL){
        return EUROVISION_NULL_ARGUMENT;
    }
    if((stateGiver < 0) || (stateTaker < 0)){
        return EUROVISION_INVALID_ID;
    }
    if((!mapContains(eurovision->states, &stateGiver)) || (!mapContains(eurovision->states, &stateTaker))){
        return EUROVISION_STATE_NOT_EXIST;
    }
    if (stateGiver == stateTaker){
        return EUROVISION_SAME_STATE;
    }
    State state = mapGet(eurovision->states, &stateGiver);
    removeOneVote(state, stateTaker);
    return EUROVISION_SUCCESS;
}

List eurovisionRunContest(Eurovision eurovision, int audiencePercent){
    if(eurovision == NULL) {
        return NULL;
    }
    if((audiencePercent < 1) || (audiencePercent > 100)){
        return NULL;
    }

    int stateSize = mapGetSize(eurovision->states);
    int judgeSize = mapGetSize(eurovision->judges);

    List result = listCreate((CopyListElement)copyChars, (FreeListElement)freeChars);

    if(stateSize == 0){
        return result;
    }
    if(judgeSize == 0){
        judgeSize = 1;
    }

    Map states = createMapAndPutStart(eurovision, (copyMapDataElements)copyId, (freeMapDataElements)freeId, 0);
    if(states == NULL){
        return NULL;
    }
    Map judges = createMapAndPutStart(eurovision, (copyMapDataElements)copyId, (freeMapDataElements)freeId, 0);
    if(judges == NULL){
        mapDestroy(states);
        return NULL;
    }
    Map allScore = createMapAndPutStart(eurovision, (copyMapDataElements)copyDouble, (freeMapDataElements)freeDouble, 0);
    if(allScore == NULL){
        mapDestroy(states);
        mapDestroy(judges);
        return NULL;
    }
    MAP_FOREACH(int*, iterator, eurovision->states){
        State state = mapGet(eurovision->states, iterator);
        int* audience_votes = topVotingStates(state);
        fillMapScore(states, audience_votes);
    }
    MAP_FOREACH(int*, iterator, eurovision->judges){
        Judge judge = mapGet(eurovision->judges, iterator);
        fillMapScore(judges, judge->scores);
    }

    MAP_FOREACH(int*, iterator, eurovision->states){
        int* stateScore = mapGet(states, iterator);
        int* judgeScore = mapGet(judges, iterator);
        double stateFinalScore = ((double)(*stateScore))/(stateSize-1);
        double judgeFinalScore = ((double)(*judgeScore))/(judgeSize);
        double statesPercent = ((double)audiencePercent)/100.0;
        double finalScore = stateFinalScore * statesPercent + judgeFinalScore * (1-statesPercent);
        if(mapPut(allScore, iterator, &finalScore) != MAP_SUCCESS){
            mapDestroy(states);
            mapDestroy(judges);
            mapDestroy(allScore);
            return NULL;
        }
    }

    if(result == NULL){
        mapDestroy(states);
        mapDestroy(judges);
        mapDestroy(allScore);
        return NULL;
    }
    for (int j = 0; j < stateSize; ++j) {
        int max = maxScoreDouble(allScore);
        State state = mapGet(eurovision->states, &max);
        if(listInsertLast(result, state->stateName) != LIST_SUCCESS){
            mapDestroy(states);
            mapDestroy(judges);
            mapDestroy(allScore);
            listDestroy(result);
            return NULL;
        }
        mapRemove(allScore, &max);
    }
    return result;
}

List eurovisionRunAudienceFavorite(Eurovision eurovision){
    return eurovisionRunContest(eurovision, 100);
}

List eurovisionRunGetFriendlyStates(Eurovision eurovision){
    if(eurovision == NULL){
        return NULL;
    }
    Map topStates = createMapAndPutStart(eurovision, (copyMapDataElements)copyId, (freeMapDataElements)freeId, INITIAL_VALUE);
    if(topStates == NULL){
        return NULL;
    }
    MAP_FOREACH(int*, iterator, eurovision->states){
        State state = mapGet(eurovision->states, iterator);
        int stateWithHighestVotes = getStateWithHighestVotes(state->votes);
        if(stateWithHighestVotes != INITIAL_VALUE) {
            if (mapPut(topStates, iterator, &stateWithHighestVotes) != MAP_SUCCESS){
                mapDestroy(topStates);
                return NULL;
            }
        }
    }

    List result = listCreate((CopyListElement)copyChars, (FreeListElement)freeChars);
    if(result == NULL){
        mapDestroy(topStates);
        return NULL;
    }
    int* ptr = mapGetFirst(topStates);
    while(ptr != NULL){
        int* firstState = mapGet(topStates, ptr);
        if(*firstState == INITIAL_VALUE){
            mapRemove(topStates, ptr);
            ptr = mapGetFirst(topStates);
            continue;
        }
        int* secondState = mapGet(topStates, firstState);
        if (*ptr == *secondState) {
            State state1 = mapGet(eurovision->states, firstState);
            State state2 = mapGet(eurovision->states, secondState);
            if (listInsertLast(result, writeStateByOrder(state1->stateName, state2->stateName)) != LIST_SUCCESS) {
                mapDestroy(topStates);
                listDestroy(result);
                return NULL;
            }
        }
        mapRemove(topStates, firstState);
        mapRemove(topStates, ptr);

        ptr = mapGetFirst(topStates);
    }
    if(listSort(result, (CompareListElements)compareChars) != LIST_SUCCESS){
        mapDestroy(topStates);
        listDestroy(result);
        return NULL;
    }

    mapDestroy(topStates);
    return result;
}
********************************************************************************************************************************************
//manar// h.files
judge.h
#ifndef EUROVISION_JUDGE_H
#define EUROVISION_JUDGE_H

#include <stdbool.h>

#define JUDGE_SCORE 10

/**
* judge Container

* The following functions are available:
*   judgeCreate		- Creates a new empty judge
*   judgeDestroy	- Deletes an existing judge and frees all resources
*   judgeCopy		- Copies an existing judge
*  judgeContainState - returns weather or not a stateid exists inside the judge scores.
*/

/** Type for defining the judge */
typedef struct judge_t *Judge;

/** Type used for returning error codes from judge functions */
typedef enum JudgeResult_t {
    JUDGE_SUCCESS,
    JUDGE_OUT_OF_MEMORY,
    JUDGE_NULL_ARGUMENT,
    JUDGE_ITEM_ALREADY_EXISTS,
    JUDGE_ITEM_DOES_NOT_EXIST
} JudgeResult;

/**
* judgeCreate: Allocates a new judge.
*
* @param id_the judge id
* @param judgeName
* @param scores pointer to array size 10 that contains the statesid that the judge voted to
* @return
* 	NULL - if one of the parameters is NULL or allocations failed.
* 	A new judge in case of success.
*/
Judge judgeCreate(int id, const char* judgeName, const int* scores);

/**
* judgeDestroy: Deallocates an existing judge
*
* @param map - Target judge to be deallocated. If judge is NULL nothing will be
* 		done
*/
void judgeDestroy(Judge judge);

/**
* judgeCopy: Creates a copy of target judge.
* Iterator value is undefined after this operation.
*
* @param map - Target judge.
* @return
* 	NULL if a NULL was sent or a memory allocation failed.
* 	A judge containing the same elements as judge otherwise.
*/
Judge judgeCopy(Judge judge);
/**
 * judgeContainState: Checks if the judge voted to the state with the stateid that the function gets
 *
* @param judge - The judge to search in his array of scores
* @param stateId - The stateid to look for.
* @return
* 	false - if one or more of the inputs is null, or if the stateid was not found.
* 	true - if the stateid was found in the judge scores.
*/

bool judgeContainState(Judge judge, int stateId);

#endif //EUROVISION_JUDGE_H










///////state.h
#ifndef EUROVISION_STATE_H
#define EUROVISION_STATE_H

#define FIRST_VOTE 1
#define INITIAL_VALUE -1
#define DIFFERENT_VALID_SCORE 10

#include <stdbool.h>
#include "map.h"

/**
* State Container
*
* Implements a state container type.
*
* The following functions are available:
*  stateCreate		- Creates a new empty state
*  stateDestroy		- Deletes an existing state and frees all resources
*  stateCopy		- Copies an existing state
*  addOneVote       -adds one vote to the state votes to the statetaker
*  removeOneVote    -removes one vote of the state votes to the statetaker
*  getStateWithHighestVotes - gets the state id of the highest voted to state
*  topVotingStates     -gets array size 10 with the top voting to states
*/

/** Type for defining the state */
typedef struct state_t *State;

/** Type used for returning error codes from state functions */
typedef enum StateResult_t {
    STATE_SUCCESS,
    STATE_OUT_OF_MEMORY,
    STATE_NULL_ARGUMENT,
    STATE_ITEM_ALREADY_EXISTS,
    STATE_ITEM_DOES_NOT_EXIST
} StateResult;

/**
* stateCreate: Allocates a new state.
*
* @param id - the new state id
* @param stateName-the new state name
* @param songName_the new state songName
* @return
* 	NULL - if one of the parameters is NULL or allocations failed.
* 	A new State in case of success.
*/
State stateCreate(int id, const char* stateName, const char* songName);

/**
* stateDestroy: Deallocates an existing state. Clears all elements by using the
* stored free functions.
*
* @param state - Target state to be deallocated. If state is NULL nothing will be
* 		done
*/
void stateDestroy(State state);

/**
* stateCopy: Creates a copy of target state.
* @param state - Target state.
* @return
* 	NULL if a NULL was sent or a memory allocation failed.
* 	A State containing the same elements as state otherwise.
*/
State stateCopy(State state);
/**
 * addOneVote:adds one vote to the state votes to the statetaker
 * @param state -Target state
 * @param stateTaker -the state to add one vote to
 * @return returns false if faild to add the vote otherwise true
 */
bool addOneVote(State state, int stateTaker);

/**
 *  removeOneVote    -removes one vote of the state votes to the statetaker
 * @param state -Target state
 * @param stateTaker -the state to remove on vote from
 */
void removeOneVote(State state, int stateTaker);
/**
 * gets the state id of the highest voted-to state
 * @param votes -the target state votes
 * @return the highest voted-to state by the target state
 */
int getStateWithHighestVotes(Map votes);
/**
 * topVotingStates -gets array size 10 with the top voting to states
 * @param state -Target state
 * @return array size 10 with the top voting to states
 * if the state voted to less than 10 states then the rest of the array will contain 0
 */

int* topVotingStates(State state);

#endif //EUROVISION_STATE_H


